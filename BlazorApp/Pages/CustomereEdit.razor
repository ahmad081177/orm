@page "/customereEdit/{Id:int}"
@inject NavigationManager navigationManager
@inject IJSRuntime js
@using Models
@using DBL
<div class="form-signin text-center w-50">
    <img class="mb-4" src="https://getbootstrap.com/docs/4.0/assets/brand/bootstrap-solid.svg" alt="" width="72" height="72">
    <h1 class="h3 mb-3 font-weight-normal">Edit</h1>

    <label for="inputName" class="sr-only">Name</label>
    <input @bind-value="Name" type="text" id="inputEmail" class="form-control m-1" placeholder="Name" required autofocus>

    <label for="inputEmail" class="sr-only">Email address</label>
    <input @bind-value="Email" type="text" id="inputEmail" class="form-control m-1" placeholder="Email" required>

    <div class="mt-5 mb-3 text-muted"><a href="editPassword/@Id.ToString()">Edit Password</a></div>

    <button @onclick="doEdit" class="btn btn-lg btn-primary btn-block m-1" type="submit">Update</button>
</div>


@code {
    [Parameter] public int? Id { get; set; }
    private string Name = "";
    private string Email = "";


    protected override async Task OnInitializedAsync()
    {
        CustomerDB db = new CustomerDB();
        List<Customer> x = await db.SelectAllAsync();
        await base.OnInitializedAsync();
    }
    protected override async void OnParametersSet()
    {
        if (!Id.HasValue)
            Id = 0;
        else
        {
            CustomerDB customerDB = new CustomerDB();
            Customer? customer = await customerDB.GetModelByPkAsync(Id.ToString());
            if (customer != null)
            {
                Name = customer.Name;
                Email = customer.Email;
            }
        }
    }
    private Customer BuildCustomer()
    {
        Customer customer = new Customer();
        customer.Name = Name;
        customer.Email = Email;
        customer.Id = Id??0;
        return customer;
    }
    async Task doEdit()
    {
        CustomerDB customerDB = new CustomerDB();
        Customer customer = BuildCustomer();
        int n = await customerDB.UpdateAsync(customer);
        if (n > 0)
        {
            await js.InvokeVoidAsync("alert", $"Updated Successfully!");
            navigationManager.NavigateTo("/");
        }
        else
        {
            await js.InvokeVoidAsync("alert", $"Update failed!");
            navigationManager.NavigateTo("/");
        }
    }
}